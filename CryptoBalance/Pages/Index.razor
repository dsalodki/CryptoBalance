@page "/"
@using CryptoBalance.Models;
@using CryptoBalance.Utils;
@using Dapper;
@using Npgsql;
@using System.Text.Json;
@using System.Timers;
@using Timer = System.Timers.Timer;

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.5.0/font/bootstrap-icons.css">

<PageTitle>Index</PageTitle>

<table class="table">
    <thead>
        <tr>
            <td>ID</td>
            <td>Address</td>
            <td @onclick="ChangeSortOrder">Balance<i class="bi @(_isSortOrderAscending ? "bi-arrow-up" : "bi-arrow-down")"></i></td>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in _data.Results)
        {
            <tr>
                <td>@item.Id</td>
                <td>@item.Address</td>
                <td>@item.Balance</td>
            </tr>
        }
    </tbody>
</table>

<div>
    <a style="cursor: pointer" @onclick="GoToFirstPage">1</a>
    <a style="cursor: @(_page == 1 ? "not-allowed" : "pointer")" class="@(_page == 1 ? "disabled" : "")" @onclick="GoToPrevPage">Prev</a>
    <a style="cursor: pointer" class="active">@_page</a>
    <a style="cursor: @(_page == _data.PageCount ? "not-allowed" : "pointer")" class="@(_page == _data.PageCount ? "disabled" : "")" @onclick="GoToNextPage">Next</a>
    <a style="cursor: pointer" @onclick="GoToLastPage">@_data.PageCount</a>
</div>


@code {
    private bool _isSortOrderAscending = true;
    private int _page = 1;
    private PagedResult<Item> _data = new PagedResult<Item>() { CurrentPage = 1 };
    private const int PageSize = 10;

    private Timer _timer;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            _timer = new Timer();
            _timer.Interval = 10000;
            _timer.Elapsed += OnTimerInterval;
            _timer.AutoReset = true;
            _timer.Enabled = true;
        }
        base.OnAfterRender(firstRender);
    }

    private void OnTimerInterval(object sender, ElapsedEventArgs e)
    {
        if (!Balance.IsSynchrozed)
        {
            FetchData();
            Balance.IsSynchrozed = true;
            InvokeAsync(() => StateHasChanged());
        }
    }

    protected override void OnInitialized()
    {
        FetchData();
    }

    private void FetchData()
    {
        _data.PageCount = (Balance.Data.Count(d => d.Value != null) + PageSize - 1) / PageSize;

        var query = Balance.Data.Where(d => d.Value != null);
        query = _isSortOrderAscending ? query.OrderBy(d => d.Value) : query.OrderByDescending(d => d.Value);

        _data.Results = query.Skip((_page -1)* PageSize).Take(PageSize).Select(d => new Item
            {
                Id = d.Key.Id,
                Address = d.Key.Address,
                Balance = d.Value.Value
            }).ToArray();
    }

    private void GoToFirstPage()
    {
        if (_page == 1)
        {
            return;
        }
        _page = 1;
        FetchData();
    }

    private void GoToLastPage()
    {
        if (_page == _data.PageCount)
        {
            return;
        }
        _page = _data.PageCount;
        FetchData();
    }

    private void GoToPrevPage()
    {
        if (_page == 1)
        {
            return;
        }
        _page--;
        FetchData();
    }

    private void GoToNextPage()
    {
        if (_page == _data.PageCount)
        {
            return;
        }
        _page++;
        FetchData();
    }

    private void ChangeSortOrder()
    {
        _isSortOrderAscending = !_isSortOrderAscending;
        FetchData();
    }
}
